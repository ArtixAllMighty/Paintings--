package subaraki.paintings.mod;

import java.util.Collections;

import net.minecraft.entity.item.EntityPainting;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.entity.EntityEvent.EntityConstructing;
import net.minecraftforge.event.entity.EntityJoinWorldEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;

import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.apache.logging.log4j.Logger;
import subaraki.paintings.config.ConfigurationHandler;
import subaraki.paintings.mod.server.proxy.CommonProxy;

/**
 *  TODO:
 *
 *  The server needs to be the authority on what template is in use.
 *      The client needs to generate paintings on connect. -- This might make per-server configurations possible.
 *  The server needs to be able to accept arbitrary painting enums and add them dynamically.
 */

@Mod(modid = Paintings.MODID, name = Paintings.NAME, version = Paintings.VERSION, dependencies = "after:PaintingSelGui")
public class Paintings {

    public static final String MODID = "morepaintings";
    public static final String VERSION = "1.11.2-3.2.1.1";
    public static final String NAME = "Paintings++";

    @SidedProxy(serverSide = "subaraki.paintings.mod.server.proxy.CommonProxy", clientSide = "subaraki.paintings.mod.client.proxy.ClientProxy")
    public static CommonProxy proxy;
    public static Logger log;

    @EventHandler
    public void preInit(FMLPreInitializationEvent event) {
        log = event.getModLog();

        ModMetadata modMeta = event.getModMetadata();
        modMeta.authorList = Collections.singletonList("Subaraki");
        modMeta.autogenerated = false;
        modMeta.credits = "Subaraki";
        modMeta.description = "More Paintings! Check the config file for options.";
        modMeta.url = "http://www.minecraftforum.net/forums/mapping-and-modding/minecraft-mods/1287285-/";

        ConfigurationHandler.instance.loadConfig(event.getSuggestedConfigurationFile());

        proxy.loadPatternDefinition();
        proxy.registerRenderInformation();
    }

    private PaintingsEventHandler eventHandler = new PaintingsEventHandler();
    private class PaintingsEventHandler {

        @SubscribeEvent
        public void entityConstructingEvent(EntityConstructing event) {
            // We only care about paintings
            if (event.getEntity() instanceof EntityPainting) {
                EntityPainting entity = (EntityPainting)event.getEntity();
                entity.art = EntityPainting.EnumArt.values()[0];
            }
        }

        @SubscribeEvent
        public void entityJoinWorldEvent(EntityJoinWorldEvent event) {
            // We only care about paintings
            if (event.getEntity() instanceof EntityPainting) {
                log.info(event);
            }
        }
    }
}
